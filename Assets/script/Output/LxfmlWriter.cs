//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using UnityEngine;
using System.Collections.Generic;
using System.IO;
using System.Collections;
//using UnityEditor;
using UnityEngine.UI;
using System.Windows.Forms;
using System.Runtime.InteropServices;

namespace AssemblyCSharp
{
	public class LxfmlWriter:MonoBehaviour
	{
		private String fileName="";
		private List<String> ref_trans_strs;
		static int[] color2material = {
			26, // BLACK
			1, // WHITE
			21, // RED
			194, // LIGHT_GRAY
			199, // DARK_GRAY
			24, // YELLOW
			23, // BLUE
			28, // GREEN
			192, // BROWN
		};
		Dictionary<int, string> brickID;
		Dictionary<int, string> plateID;

		public Transform Canvas;
		public Transform LoadingBar;
		public Transform percentText;
		public Transform LoadingText;
		private bool onLoading = false;
		private float percentage;
		private bool saving = false;

		public void FixedUpdate(){
			if (!saving)
				return;
			//Update GUI
			if (onLoading) {
				//update GUI initialize loading bar
				if (percentage < 1) {
					//Update the loading percentage(text part)
					percentText.GetComponent<Text> ().text = String.Format("{0:0.00}",percentage*100) + "%";
					LoadingText.gameObject.SetActive (true);
				} else {
					//update UI when the process is done
					LoadingText.gameObject.SetActive (true);
					percentText.GetComponent<Text> ().text = "DONE!";
				}
				//set the loading bar to active
				Canvas.gameObject.SetActive (true);
				//Update the loading percentage(Graphic part)
				LoadingBar.GetComponent<Image> ().fillAmount = percentage;
			} else {
				//no voxelizing... turn the loading bar to invisible
				Canvas.gameObject.SetActive (false);
			}
			
		}

		public LxfmlWriter ()
		{
			fileName = "result";
			brickID = new Dictionary<int,string > ();
			brickID.Add (11, "3005");
			brickID.Add (12, "3004");
			brickID.Add (13, "3622");
			brickID.Add (14, "3010");
			brickID.Add (16, "3009");
			brickID.Add (18, "3008");
			brickID.Add (22, "3003");
			brickID.Add (23, "3002");
			brickID.Add (24, "3001");
			brickID.Add (26, "2456");
			brickID.Add (28, "3007");

			plateID = new Dictionary<int,string > ();
			plateID.Add (11, "3024");
			plateID.Add (12, "3023");
			plateID.Add (13, "3623");
			plateID.Add (14, "3710");
			plateID.Add (16, "3666");
			plateID.Add (18, "3460");
			plateID.Add (22, "3022");
			plateID.Add (23, "3021");
			plateID.Add (24, "3020");
			plateID.Add (26, "3795");
			plateID.Add (28, "3034");
		}

		public IEnumerator writeXML(List<Lego> voxels){
			GameObject target = GameObject.Find ("Target");
			OBJ obj = target.GetComponent<OBJ> ();

			string sSavePath = "result.lxfml";

			OpenFileName ofn = new OpenFileName();  

			ofn.structSize = Marshal.SizeOf(ofn);  

			ofn.filter = "LXFML-Files (*.lxfml)\0*.lxfml\0\0";  

			ofn.file = new string(new char[256]);  

			ofn.maxFile = ofn.file.Length;  

			ofn.fileTitle = new string(new char[64]);  

			ofn.maxFileTitle = ofn.fileTitle.Length;  

			ofn.initialDir =UnityEngine.Application.dataPath;  

			ofn.title = "Save Model";  

			ofn.defExt = "LXFML";//显示文件的类型  

			ofn.flags=0x00080000|0x00001000|0x00000800|0x00000200|0x00000008;//OFN_EXPLORER|OFN_FILEMUSTEXIST|OFN_PATHMUSTEXIST| OFN_ALLOWMULTISELECT|OFN_NOCHANGEDIR  
			// ofn.flags = 0x00080000 | 0x00001000 | 0x00000800 | 0x00000200 | 0x00000008;

			if(DllTest.GetSaveFileName( ofn ))  
			{

				// StartCoroutine(WaitLoad(ofn.file));//加载图片到panle  
				sSavePath = ofn.file;
				Debug.Log( "Selected file with full path: {0}"+ofn.file );  

			}

			/*
			SaveFileDialog saveFileDialog = new SaveFileDialog();
			saveFileDialog.Filter = "LXFML-Files (*.lxfml)|*.lxfml"  ;
			if (saveFileDialog.ShowDialog () == DialogResult.OK) {
				sSavePath = saveFileDialog.FileName;
			}*/
			//string sSavePath = EditorUtility.SaveFilePanel("Save Session","","","lxfml");

			StreamWriter writer = File.CreateText (sSavePath);

			int threshold = (int) Mathf.Floor(((float)voxels.Count) / 10000);
			if (threshold == 0)
				threshold = 1;
			Debug.Log (threshold);

			saving = true;
			onLoading = true;
			obj.onProcessing = true;

			Debug.Log (voxels.Count);
			LoadingText.GetComponent<Text> ().text = "Saving \n writing to file...";

			ref_trans_strs = new List<string> ();

			writer.WriteLine ("<?xml version=\"1.0\" encoding=\"UTF-8\" standalone=\"no\" ?>");
			writer.WriteLine ("<LXFML versionMajor=\"5\" versionMinor=\"0\" name=\""+fileName+"\">");
			writer.WriteLine ("  <Meta>");
			writer.WriteLine ("    <Application name=\"LEGO Digital Designer\" versionMajor=\"4\" versionMinor=\"3\"/>");
			writer.WriteLine ("    <Brand name=\"LDD\"/>");
			writer.WriteLine ("    <BrickSet version=\"1564.2\"/>");
			writer.WriteLine ("  </Meta>");
			writer.WriteLine ("  <Cameras>");
			writer.WriteLine ("    <Camera refID=\"0\" fieldOfView=\"80\" distance=\"69.282035827636719\" transformation=\"0.70710688829421997,0,-0.70710688829421997,-0.40824830532073975,0.81649661064147949,-0.40824830532073975,0.57735037803649902,0.57735013961791992,0.57735037803649902,39.999996185302734,39.999992370605469,39.999996185302734\"/>");
			writer.WriteLine ("  </Cameras>");
			writer.WriteLine ("  <Bricks cameraRef=\"0\">");
			int counter = 0;

			foreach (Lego grid in voxels) {
				int key;
				string matrix;
				bool isHorizontal = false;
				if(grid.getDimen().x > grid.getDimen().y){
					//horizontal case
					key = (int)(grid.getDimen().y*10.0f + grid.getDimen().x);
					//Debug.Log (key);
					matrix = "1,0,0,0,1,0,0,0,1,";
					if(grid.getDimen().y == 2)
						isHorizontal = true;
				}else{
					//vertical case
					key = (int)(grid.getDimen().x*10.0f + grid.getDimen().y);
					matrix = "0,0,1,0,1,0,-1,0,0,";
				}
				string designId;
				if(grid.getType()==LegoType.BRCIK){
					designId = brickID[key];
				}else{
					designId = plateID[key];
				}
				writer.WriteLine ("    <Brick refID=\""+counter.ToString()+"\" designID=\""+designId+"\">");
				writer.WriteLine ("      <Part refID=\""+counter.ToString()+"\" designID=\""+designId+"\" materials=\""+color2material[(int)grid.getColor()]+"\">");
				Vector3 lPos = grid.getLPosition(isHorizontal);
				string lPos_str = String.Format("{0:0.##},{1:0.##},{2:0.##}",lPos.x,lPos.y,lPos.z);
				ref_trans_strs.Add(lPos_str);

				writer.WriteLine ("        <Bone refID=\""+counter.ToString()+"\" transformation=\""+matrix + lPos_str+"\">");
				writer.WriteLine ("        </Bone>");
				writer.WriteLine ("      </Part>");
				writer.WriteLine ("    </Brick>");

				counter++;
				if(counter%threshold == 0){
					percentage = (float)counter /((float)voxels.Count);
				}

				yield return new WaitForFixedUpdate();
			}
			writer.WriteLine ("  </Bricks>");
			writer.WriteLine ("  <GroupSystems>");
			writer.WriteLine ("    <GroupSystems>");
			writer.WriteLine ("    </GroupSystems>");
			writer.WriteLine ("  </GroupSystems>");
			writer.WriteLine ("  <BuildingInstructions>");
			writer.WriteLine ("  </BuildingInstructions>");
			writer.WriteLine ("</LXFML>");
			writer.Close ();
			Debug.Log ("outputed");
			obj.onProcessing = false;
			onLoading = false;
			yield return new WaitForFixedUpdate();

			saving = false;
			yield return new WaitForSeconds(0.0f);
		}
	}
}

